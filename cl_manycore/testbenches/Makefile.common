# HARDWARE_PATH, TESTS_PATH, CL_DIR, C_REGRESSION_TESTS, and
# REGRESSION_TESTS_TYPE must be set by the including makefile

# AWS Paths (Don't modify - variables are set by hdk_setup.sh in aws-fpga)
export XILINX_IP    = $(HDK_SHELL_DESIGN_DIR)/ip
SDK_DIR             = $(AWS_FPGA_REPO_DIR)/sdk
C_COMMON_DIR        = $(HDK_COMMON_DIR)/software
C_SDK_USR_INC_DIR   = $(SDK_DIR)/userspace/include
C_SDK_USR_UTILS_DIR = $(SDK_DIR)/userspace/utils

include $(HARDWARE_PATH)/Makefile.include

V_TOP_SRC = cosim_wrapper

CSOURCES  = $(C_SDK_USR_UTILS_DIR)/sh_dpi_tasks.c
CSOURCES += $(C_COMMON_DIR)/src/fpga_pci_sv.c
CSOURCES += $(LIBRARIES_PATH)/bsg_manycore_driver.cpp
CSOURCES += $(LIBRARIES_PATH)/bsg_manycore_loader.cpp
CSOURCES += $(LIBRARIES_PATH)/bsg_manycore_mem.cpp
CSOURCES += $(LIBRARIES_PATH)/bsg_manycore_eva.cpp
CSOURCES += $(LIBRARIES_PATH)/bsg_manycore_tile.cpp
CSOURCES += $(LIBRARIES_PATH)/bsg_manycore_bits.cpp
CSOURCES += $(LIBRARIES_PATH)/bsg_manycore_elf.cpp
CSOURCES += $(LIBRARIES_PATH)/bsg_manycore_memory_manager.cpp
CSOURCES += $(LIBRARIES_PATH)/bsg_manycore_cuda.cpp
CSOURCES += $(LIBRARIES_PATH)/bsg_manycore_printing.cpp
CSOURCES += $(LIBRARIES_PATH)/bsg_manycore_config.cpp
CSOURCES += $(LIBRARIES_PATH)/bsg_manycore.cpp
CSOURCES += $(LIBRARIES_PATH)/bsg_manycore_responder.cpp
CSOURCES += $(LIBRARIES_PATH)/bsg_manycore_uart_responder.cpp
CSOURCES += $(LIBRARIES_PATH)/bsg_manycore_request_packet_id.cpp
CSOURCES += $(LIBRARIES_PATH)/bsg_manycore_origin_eva_map.cpp

CFLAGS   := -std=c99 -std=c++11
DEFINES   = -DCOSIM $(REGRESSION_DEFINES) -D_XOPEN_SOURCE=500 
DEFINES  += -D_BSD_SOURCE
INCLUDES := -I$(C_SDK_USR_INC_DIR) -I$(C_SDK_USR_UTILS_DIR)

INCLUDES += -I$(C_COMMON_DIR)/include -I$(SIM_PATH) -I$(LIBRARIES_PATH) 
INCLUDES += -I$(AWS_FPGA_REPO_DIR)/SDAccel/userspace/include

LOG_TARGETS = $(foreach test,$(C_REGRESSION_TESTS),$(test).cosim.log)
$(LOG_TARGETS): %: $(SIM_PATH)/%

# Hardware Targets are defined by Makefile.include in hardware
common.hardware: $(HARDWARE_TARGETS) 

cosim: $(LOG_TARGETS)

regression: $(LOG_TARGETS)
	@pass=0;  total=0; \
	echo ""; \
	echo ""; \
	echo "Parsing $(REGRESSION_TESTS_TYPE) Regression Test results..."; \
	echo ""; \
	echo ""; \
	for target in $(basename $(basename $?)); do \
		if grep "BSG COSIM FAIL" $$target.cosim.log > /dev/null; then \
			echo "FAIL: Regression Test $$target failed!"; \
		else \
			echo "PASS: Regression Test $$target passed!"; \
			let "pass+=1"; \
		fi; \
		let "total+=1"; \
	done; \
	if [ ! $$pass == $$total ]; then \
		echo "==================================================="; \
		echo "" ; \
		echo "FAIL! $$pass out of $$total $(REGRESSION_TESTS_TYPE) regression tests passed"; \
		echo "" ; \
		echo "==================================================="; \
		exit 1; \
	fi; \
	echo "==========================================================="; \
	echo ""; \
	echo "PASS! All $$total tests passed for $(REGRESSION_TESTS_TYPE)"; \
	echo ""; \
	echo "===========================================================";

.PHONY: cosim regression clean

clean: simulator.clean hardware.clean
	@echo 


ifeq ($(USE_VIVADO),1)
include $(TESTBENCH_PATH)/Makefile.vivado
else
include $(TESTBENCH_PATH)/Makefile.vcs
endif

