# This Makefile fragment is for building hardware and software libraries for
# cosimulation
#
# This Makefile requires Makefile.environment to be included by a previous makefile
ORANGE=\033[0;33m
RED=\033[0;31m
NC=\033[0m
ifndef __MAKEFILE_ENVIRONMENT
$(error $(shell echo -e "$(RED)BSG MAKE ERROR: Makefile.environment not previously included$(NC)"))
endif

# Cosimulation requires VCS-MX and Vivado. Search for bsg_cadenv and use
# cadenv.mk to configure EDA Environment if it is present. If it is not present,
# check for Vivado and VCS.
ifneq ("$(wildcard $(CL_DIR)/../../bsg_cadenv/cadenv.mk)","")
$(warning $(shell echo -e "$(ORANGE)BSG MAKE WARN: Found bsg_cadenv. Including cadenv.mk to configure cad environment.$(NC)"))
include $(CL_DIR)/../../bsg_cadenv/cadenv.mk
export VCS_HOME=$(VCSMX_HOME)
else ifndef VCS_HOME
$(error $(shell echo -e "$(RED)BSG MAKE ERROR: VCS_HOME environment variable undefined. Are you sure vcs-mx is installed?$(NC)"))
endif

ifndef XILINX_VIVADO
$(error $(shell echo -e "$(RED)BSG MAKE ERROR: XILINX_VIVADO environment variable undefined. Are you sure Vivado is installed?$(NC)"))
endif

# The following variables are set by $(CL_DIR)/Makefile.hdk, which will fail if
# hdk_setup.sh has not been run, or Makefile.environment is not included
#
# HDK_SHELL_DESIGN_DIR: Path to the directory containing all the AWS "shell" IP
# AWS_FPGA_REPO_DIR: Path to the clone of the aws-fpga repo
# HDK_COMMON_DIR: Path to HDK 'common' directory w/ libraries for cosimluation.
# SDK_DIR: Path to the SDK directory in the aws-fpga repo
include $(CL_DIR)/Makefile.hdk

# -------------------- TARGETS --------------------
# This makefile defines two variables for External Use: 
#
# LIBRARIES_TARGETS: Targets for building hardware/software libraries
LIBRARIES_TARGETS = $(LIBRARIES_PATH)/libbsg_manycore_runtime.so 
LIBRARIES_TARGETS += | $(TESTBENCH_PATH)/vcs_simlibs

# LIBRARIES_CLEANS: Clean targets for Hardware/Software libraries
LIBRARIES_CLEANS  = libraries.clean

# vcs_simlibs is generated by running Vivado. It contains all of the hardware
# Xilinx hardware library files necessary for simulation. This rule also
# generates synopsys_sim.setup, but it generates it in the run directory, so we
# cd to $(TESTBENCH_PATH) so that vcs_simlibs can be reused across invocations
# of cosimulation.
#
# This output is reused between regression test suites, so it should be removed
# with `make squeakyclean` or an equivalent
$(TESTBENCH_PATH)/vcs_simlibs: $(TESTBENCH_PATH)/gen_simlibs.tcl
	cd $(TESTBENCH_PATH) && TESTBENCH_PATH=$(TESTBENCH_PATH) \
	vivado -mode batch -source $<

$(TESTBENCH_PATH)/synopsys_sim.setup: | $(TESTBENCH_PATH)/vcs_simlibs

# The applications link against the BSG Manycore Libraries, and the FPGA
# Management libaries, so we build them as necessary. They should not need to be
# re-built every time a regression test is compiled, so they should be removed
# with `make squeakyclean` or an equivalent
$(LIBRARIES_PATH)/libbsg_manycore_runtime.so: $(TESTBENCH_PATH)/libfpga_mgmt.so
	CFLAGS="-DCOSIM" CXXFLAGS="-DCOSIM" \
	LDFLAGS="-L$(TESTBENCH_PATH) -Wl,-rpath=$(TESTBENCH_PATH)" \
		$(MAKE) -C $(LIBRARIES_PATH) build 
	ln -s $@.1.0 $@.1
	ln -s $@.1.0 $@

$(TESTBENCH_PATH)/libfpga_mgmt.so:
	$(CC) -std=c11 -D_GNU_SOURCE -fPIC -I$(C_SDK_USR_INC_DIR) \
		-I$(C_SDK_USR_UTILS_DIR) -I$(C_COMMON_DIR)/include \
		-I$(AWS_FPGA_REPO_DIR)/SDAccel/userspace/include \
		$(C_SDK_USR_UTILS_DIR)/sh_dpi_tasks.c \
		$(C_COMMON_DIR)/src/fpga_pci_sv.c    \
		-shared -Wl,-soname,$(notdir $@) -o $@ 

libraries.clean: 
	rm -rf $(TESTBENCH_PATH)/synopsys_sim.setup
	rm -rf $(TESTBENCH_PATH)/vcs_simlibs
	rm -rf $(TESTBENCH_PATH)/libfpga_mgmt.so
	$(MAKE) -C $(LIBRARIES_PATH) clean COSIM=1
	rm -rf $(LIBRARIES_PATH)/*.1
	rm -rf $(LIBRARIES_PATH)/*.1.0

.PHONY: libraries.clean
