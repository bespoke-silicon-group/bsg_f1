# This Makefile Fragment enables VCS Cosimulation, which is 20-30x faster than
# Vivado simulation AND supports Python integration. This file is included by
# Makefile.common in this directory. 

# NOTE: This file REQUIRES several variables to be set: 
# 
# SIM_PATH: The path to the directory where the simulation is run
# TESTS_PATH: The path to the directory containing the .c files for testing
# TESTBENCH_PATH: The path to the testbench directory in the bsg_f1 repository
# COSIM_REGRESSION_TESTS: Names of all available regression tests.
# XILINX_IP: Path to the Xilinx IP Directory
# 
# (These varibles are typically set by Makefile.common, or the Makefile that
# includes Makefile.common.)
#
# BASEJUMP_STL_DIR: Path to a clone of BaseJump STL
# BSG_MANYCORE_DIR: Path to a clone of BSG Manycore
# CL_DIR: Path to the directory of this AWS F1 Project
#
# (These varibles are typically set by Makefile.environment, which is included
# by the top-level makefile.)
#
# XILINX_IP: Path to the Xilinx IP Directory 
#
# (XILINX_IP is set by sourcing settings64.sh provided by Xilinx)
#
# common.hardware
#
# This rule is defined by the including Makefile (typically Makefile.common) and
# should generate any hardware files needed for simulation.

SIMULATOR=VCS

AXI_MEMORY_MODEL ?= 1


VDEFINES+=VCS
VLOGAN_DEFINES = $(foreach def,$(VDEFINES),+define+"$(def)")

VLOGAN_FILELIST := $(TESTBENCH_PATH)/top.vcs.f
VLOGAN_VFLAGS = -ntb_opts tb_timescale=1ps/1ps -timescale=1ps/1ps -sverilog \
	+systemverilogext+.svh +systemverilogext+.sv \
	+libext+.sv +libext+.v +libext+.vh +libext+.svh \
	-full64 -lca -v2005 +v2k +lint=TFIPC-L -assert svaext 

CDEFINES += -DVCS
VCS_CFLAGS = $(foreach def,$(CFLAGS),-CFLAGS "$(def)")
VCS_CFLAGS += $(foreach def,$(CDEFINES),-CFLAGS "$(def)")
VCS_CFLAGS += $(foreach def,$(INCLUDES),-CFLAGS "$(def)")
VCS_CFLAGS += $(foreach def,$(CXXFLAGS),-CFLAGS "$(def)")
VCS_LDFLAGS = $(foreach def,$(LDFLAGS),-LDFLAGS "$(def)")
VCS_VFLAGS := -M -I +lint=TFIPC-L \
	-ntb_opts tb_timescale=1ps/1ps -timescale=1ps/1ps \
	-sverilog -full64 +memcbk -licqueue -lca -v2005 

VCS_VFLAGS += $(if $(TURBO),+rad +NO_WAVES,-debug_pp)
VCS_VFLAGS += $(if $(DEBUG),-gui,)
VCS_VFLAGS += $(if $(DEBUG),-R,)
VCS_VFLAGS += $(if $(DEBUG),-debug_all,)

.PHONY: simulator.clean squeakyclean 
.PRECIOUS: $(SIM_PATH)/%.log $(SIM_PATH)/%

# vcs_simlibs is generated by running Vivado. It contains all of the hardware
# Xilinx hardware library files necessary for simulation. This rule also
# generates synopsys_sim.setup, but it generates it in the run directory, so we
# cd to $(TESTBENCH_PATH) so that vcs_simlibs can be reused across invocations
# of cosimulation.
#
# Since this output is reused between cosimulation invocations (spmd, library,
# cuda, etc), it must be removed with `make squeakyclean`
SIMLIBS_PATH=$(TESTBENCH_PATH)/vcs_simlibs
$(SIMLIBS_PATH): $(TESTBENCH_PATH)/gen_simlibs.tcl
	cd $(TESTBENCH_PATH) && TESTBENCH_PATH=$(TESTBENCH_PATH) \
	vivado -mode batch -source $<


# synopsys_sim.setup contains absolute paths to all the compiled Xilinx IP.
# It gets generated by the $(SIMLIBS_PATH) rule, so we just copy it.
$(TESTBENCH_PATH)/synopsys_sim.setup: | $(SIMLIBS_PATH)
$(SIM_PATH)/synopsys_sim.setup: $(TESTBENCH_PATH)/synopsys_sim.setup
	cp $< $@

# AN.DB is the database (?) of compiled Verilog files. 
$(SIM_PATH)/AN.DB: $(SIM_PATH)/synopsys_sim.setup
$(SIM_PATH)/AN.DB: common.hardware $(VLOGAN_FILELIST)
	CL_DIR=$(CL_DIR) \
	BSG_MANYCORE_DIR=$(BSG_MANYCORE_DIR) \
	BASEJUMP_STL_DIR=$(BASEJUMP_STL_DIR) \
	XILINX_IP=$(XILINX_IP) \
	vlogan $(VLOGAN_VFLAGS) $(VLOGAN_DEFINES) -f $(VLOGAN_FILELIST) \
		$(TESTBENCH_PATH)/$(WRAPPER_NAME).sv $(VLOGAN_DEFINES) \
		-l compile.vlogan.log

# VCS Generates an executable file by compiling the $(TESTS_PATH).c file that
# corresponds to the target test in the $(TESTS_PATH) directory. To allow users
# to attach test-specific makefile rules, each test has a corresponding
# <test_name>.rule that can be called. 
#
# These next two rules appear similar, but they are not! The first rule pattern
# matches tests in $(INDEPENDENT_MAIN_TESTS), that have a matching top-level .c
# with the same name as the test. The second one pattern matches tests in
# $(UNIFIED_MAIN_TESTS) that use test_unified_main.c. 
$(SIM_PATH)/%: $(TESTS_PATH)/%.c %.rule $(CSOURCES) | $(SIM_PATH)/AN.DB
	vcs tb glbl -j8 $(WRAPPER_NAME) $< $(VCS_CFLAGS) $(CSOURCES) \
		$(VCS_LDFLAGS) -CFLAGS "-DBSG_TEST_NAME=$(notdir $@)" \
		$(VCS_VFLAGS) -o $@ -l compile.vcs.log 

UNIFIED_MAIN_TARGETS=$(foreach tgt,$(UNIFIED_MAIN_TESTS),$(SIM_PATH)/$(tgt))
$(UNIFIED_MAIN_TARGETS): $(SIM_PATH)/%: $(TESTS_PATH)/test_unified_main.c %.rule $(CSOURCES) | $(SIM_PATH)/AN.DB
	vcs tb glbl -j8 $(WRAPPER_NAME) $< $(VCS_CFLAGS) $(CSOURCES) \
		-CFLAGS "-DBSG_TEST_NAME=$(notdir $@)" $(VCS_VFLAGS) -o $@ \
		-l compile.vcs.log 

# Run the executable to generate the log file. The output vpd file will be named
# <test_name>.vpd
$(SIM_PATH)/%.cosim.log: $(SIM_PATH)/%
	$< -l $@ +ntb_random_seed_automatic +vpdfile+$<.vpd

# simulator.clean shouldn't be called directly. Makefile.common will call this
# rule when `make clean` is called.
simulator.clean:
	rm -rf $(SIM_PATH)/AN.DB $(SIM_PATH)/DVEfiles
	rm -rf $(SIM_PATH)/*.daidir $(SIM_PATH)/csrc 
	rm -rf $(SIM_PATH)/64 $(SIM_PATH)/.cxl*
	rm -rf $(SIM_PATH)/*.log $(SIM_PATH)/*.jou 
	rm -rf $(SIM_PATH)/synopsys_sim.setup 
	rm -rf $(SIM_PATH)/*.key $(SIM_PATH)/*.vpd 
	rm -rf $(SIM_PATH)/vc_hdrs.h
	rm -rf $(COSIMULATION_TARGETS) .vlogansetup* 

# squeakyclean removes any VCS outputs that can be reused betweeen cosimulation
# invocations.
squeakyclean:
	rm -rf $(TESTBENCH_PATH)/synopsys_sim.setup
	rm -rf $(SIMLIBS_PATH)
