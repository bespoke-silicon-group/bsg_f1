# This Makefile fragment is for building hardware and software libraries for
# cosimulation
ORANGE=\033[0;33m
RED=\033[0;31m
NC=\033[0m

# This file REQUIRES several variables to be set. They are typically
# set by the Makefile that includes this makefile..
# 

# CL_DIR: The path to the root of the BSG F1 Repository
ifndef CL_DIR
$(error $(shell echo -e "$(RED)BSG MAKE ERROR: CL_DIR is not defined$(NC)"))
endif

# TESTBENCH_PATH: The path to the testbenches folder in BSG F1
ifndef TESTBENCH_PATH
$(error $(shell echo -e "$(RED)BSG MAKE ERROR: TESTBENCH_PATH is not defined$(NC)"))
endif

# LIBRARIES_PATH: The path to the regression folder in BSG F1
ifndef LIBRARIES_PATH
$(error $(shell echo -e "$(RED)BSG MAKE ERROR: LIBRARIES_PATH is not defined$(NC)"))
endif

# The following variables are set by $(CL_DIR)/hdk.mk, which will fail if
# hdk_setup.sh has not been run, or environment.mk is not included
#
# HDK_SHELL_DESIGN_DIR: Path to the directory containing all the AWS "shell" IP
# AWS_FPGA_REPO_DIR: Path to the clone of the aws-fpga repo
# HDK_COMMON_DIR: Path to HDK 'common' directory w/ libraries for cosimluation.
# SDK_DIR: Path to the SDK directory in the aws-fpga repo
include $(CL_DIR)/hdk.mk

# libraries.mk defines the sources and targets for the BSG Manycore Runtime
# library.
include $(LIBRARIES_PATH)/libraries.mk

# libbsg_manycore_runtime will be compiled in $(LIBRARIES_PATH)
LDFLAGS    += -L$(LIBRARIES_PATH) -Wl,-rpath=$(LIBRARIES_PATH)

# vcs_simlibs is generated by running Vivado. It contains all of the hardware
# Xilinx hardware library files necessary for simulation. This rule also
# generates synopsys_sim.setup, but it generates it in the run directory, so we
# cd to $(TESTBENCH_PATH) so that vcs_simlibs can be reused across invocations
# of cosimulation.
#
# This output is reused between regression test suites, so it should be removed
# with `make squeakyclean` or an equivalent
$(TESTBENCH_PATH)/synopsys_sim.setup: | $(TESTBENCH_PATH)/vcs_simlibs
$(TESTBENCH_PATH)/vcs_simlibs: $(TESTBENCH_PATH)/gen_simlibs.tcl
	cd $(TESTBENCH_PATH) && TESTBENCH_PATH=$(TESTBENCH_PATH) \
	vivado -mode batch -source $<

# The applications link against the BSG Manycore Libraries, and the FPGA
# Management libaries, so we build them as necessary. They do NOT need to be
# re-built every time a regression test is compiled

# Define the COSIM macro so that the DPI Versions of functions are called
$(OBJECTS): CXXFLAGS += -DCOSIM
$(OBJECTS): CFLAGS   += -DCOSIM

# libfpga_mgmt will be compiled in $(TESTBENCH_PATH), so direct the linker there
$(LIBRARIES_PATH)/libbsg_manycore_runtime.so.1.0: LDFLAGS +=-L$(TESTBENCH_PATH) 
$(LIBRARIES_PATH)/libbsg_manycore_runtime.so.1.0: LDFLAGS +=-Wl,-rpath=$(TESTBENCH_PATH)
$(LIBRARIES_PATH)/libbsg_manycore_runtime.so.1.0: $(TESTBENCH_PATH)/libfpga_mgmt.so
$(LIBRARIES_PATH)/libbsg_manycore_runtime.so.1: %: %.0
	ln -sf $@.0 $@
$(LIBRARIES_PATH)/libbsg_manycore_runtime.so: %: %.1
	ln -sf $@.1 $@

# libfpga_mgmt will be compiled in $(TESTBENCH_PATH)
$(TESTBENCH_PATH)/libfpga_mgmt.so: INCLUDES += -I$(SDK_DIR)/userspace/include
$(TESTBENCH_PATH)/libfpga_mgmt.so: INCLUDES += -I$(HDK_DIR)/common/software/include
$(TESTBENCH_PATH)/libfpga_mgmt.so: CFLAGS = -std=c11 -D_GNU_SOURCE -fPIC -shared
$(TESTBENCH_PATH)/libfpga_mgmt.so: % : $(SDK_DIR)/userspace/utils/sh_dpi_tasks.c
$(TESTBENCH_PATH)/libfpga_mgmt.so: % : $(HDK_DIR)/common/software/src/fpga_pci_sv.c
	$(CC) $(CFLAGS) $(INCLUDES) $^ -Wl,-soname,$(notdir $@) -o $@

.PHONY: simlibs.clean
simlibs.clean: libraries.clean
	rm -rf $(TESTBENCH_PATH)/synopsys_sim.setup
	rm -rf $(TESTBENCH_PATH)/vcs_simlibs
	rm -rf $(TESTBENCH_PATH)/libfpga_mgmt.so
	rm -rf $(LIBRARIES_PATH)/libbsg_manycore_runtime.so
	rm -rf $(LIBRARIES_PATH)/libbsg_manycore_runtime.so.1

# Targets for building hardware/software Co-Simulation libraries
SIMLIBS += $(TESTBENCH_PATH)/libfpga_mgmt.so
SIMLIBS += $(TESTBENCH_PATH)/vcs_simlibs
SIMLIBS += $(LIBRARIES_PATH)/libbsg_manycore_runtime.so
